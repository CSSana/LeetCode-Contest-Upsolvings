1. 3194. Minimum Average of Smallest and Largest Elements

class Solution {
public:
    double minimumAverage(vector<int>& nums) 
    {
        double ans=DBL_MAX;
        sort(nums.begin(),nums.end());
        int n=nums.size();
        
        for(int i=0;i<n/2;i++)
        {
            double x=nums[i]*1.0+nums[n-i-1]*1.0;
            x/=2.0;
            ans=min(ans,x);
        }
        
        return ans;
    }
};


2. 3195. Find the Minimum Area to Cover All Ones I

class Solution {
public:
    int minimumArea(vector<vector<int>>& grid)
    {
        int cmax=-1, rmax=-1, cmin=INT_MAX, rmin=INT_MAX;
        int n=grid.size();
        int m=grid[0].size();
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1)
                {
                    cmin=min(cmin,j);
                    cmax=max(cmax,j);
                    rmin=min(rmin,i);
                    rmax=max(rmax,i);
                }
            }
        }
        
        return (cmax-cmin+1)*(rmax-rmin+1);
    }
};


3. 3196. Maximize Total Cost of Alternating Subarrays

#define ll long long
class Solution {
public:
    vector<vector<ll>>dp;
    ll rec(int ind, int flag, vector<int>&nums)
    {
        if(ind>=nums.size())
            return 0;
        
        if(dp[flag][ind]!=-1)
            return dp[flag][ind];
        
        ll ans=-1e15;
        
        if(flag) // flag true means last taken was negative so, have to take positive this time
        {
            ans=max(ans, -1*nums[ind]*1LL + rec(ind+1,0,nums));
        }
        else // Last taken was positive so have to take negative this time
        {
            ans=max(ans, nums[ind]*1LL + rec(ind+1,1,nums));
        }
        
        ans=max(ans, nums[ind]*1LL + rec(ind+1,0,nums)); // We can always take single element as subarray, So the next starting point is the next element and sign will be positive 
        
        return dp[flag][ind]=ans;
    }
    long long maximumTotalCost(vector<int>& nums)
    {
        int n = nums.size();
        dp.assign(2,vector<ll>(n+1,-1));
        return rec(0,0,nums);
    }
};


4. 3197. Find the Minimum Area to Cover All Ones II

class Solution {
public:
    int dp[4][35][35][35][35];
    int rec(int top,int left,int bottom,int right,int cnt,vector<vector<int>>& grid)
    {
        if(cnt==1)
        {
            int minR=INT_MAX, minC=INT_MAX, maxR=-1, maxC=-1;
            for(int i=top;i<=bottom;i++)
            {
                for(int j=left;j<=right;j++)
                {
                    if(grid[i][j]==1)
                    {
                        minR=min(minR,i);
                        maxR=max(maxR,i);
                        minC=min(minC,j);
                        maxC=max(maxC,j);
                    }
                }
            }
            if(minR==INT_MAX and minC==INT_MAX and maxR==-1 and maxC==-1)
                return 0;
            return (maxC-minC+1)*(maxR-minR+1);
        }
        
        if(dp[cnt][top][left][bottom][right]!=-1)
            return dp[cnt][top][left][bottom][right];
        
        int ans=INT_MAX;
        
        for(int i=top;i<=bottom;i++)
        {
            ans=min(ans, rec(top,left,i,right,1,grid)+rec(i+1,left,bottom,right,cnt-1,grid));
            ans=min(ans, rec(top,left,i,right,cnt-1,grid)+rec(i+1,left,bottom,right,1,grid));
        }
        
        for(int i=left;i<=right;i++)
        {
            ans=min(ans, rec(top,left,bottom,i,1,grid)+rec(top,i+1,bottom,right,cnt-1,grid));
            ans=min(ans, rec(top,left,bottom,i,cnt-1,grid)+rec(top,i+1,bottom,right,1,grid));
        }
        
        return dp[cnt][top][left][bottom][right]=ans;
    }
    int minimumSum(vector<vector<int>>& grid) 
    {
        memset(dp,-1,sizeof(dp));
        /*
        The idea is to fix one line where one part contains 1 rectangle and other part contains
        count-1 no of rectangles. A simple divide and conquer problem where we have to check all
        valid positions of the line and find the min area config. No need to use dp
        */
        int m=grid.size(), n=grid[0].size();
        return rec(0,0,m-1,n-1,3,grid);
    }
};
